<?php

/**
 * @file
 * Custom module that renders and caches a json+leaflet map.
 */

/**
 * Implements hook_help().
 */
function datawiki_group_map_help($path, $arg) {
  switch ($path) {
    case 'datawiki_group_map':
      $explanation = t(
        'Custom features for Data Wiki Group Map.');
      return "<p>$explanation</p>";
  }
}

/**
 * Implementatation of hook_menu().
 */
function datawiki_group_map_menu() {
  $items['map/render/community-group'] = array(
    'title' => 'Map of Community Groups',
    'description' => 'Display a map of Community Groups.',
    'page callback' => 'datawiki_group_map_render',
    'page arguments' => array(t('Map')),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_cron_job_scheduler_info().
 *
 * Compare queue names with key names in feeds_cron_queue_info().
 */
function datawiki_group_map_cron_job_scheduler_info() {
  $info = array();
  $info['datawiki_group_map_import'] = array(
    'queue name' => 'datawiki_group_map_import',
  );
  return $info;
}

/**
 * Implements hook_cron_queue_info().
 */
function datawiki_group_map_cron_queue_info() {
  $queues = array();
  $queues['datawiki_group_map_import'] = array(
    'worker callback' => 'datawiki_group_map_import',
    'time' => 15,
  );
  return $queues;
}

/**
 * Scheduler callback for importing from a source.
 */
function datawiki_group_map_import($job) {
  // dsm("saving json");
}

/**
 * Create variables for theme.
 */
function datawiki_group_map_preprocess_page(&$vars) {
  $vars['page_path'] = isset($_GET['q']) ? $_GET['q'] : '<front>';
  switch ($vars['page_path']) {
    case 'node':
    case 'map':
      datawiki_group_map_page_variables($vars);
    break;
  }
}

/** 
 * Generate settings and return them to the theme.
 */
function datawiki_group_map_page_variables(&$vars) {
  if(empty($vars['section'])) {
    $settings = datawiki_group_map_settings($vars);
  }
  else {
    $settings = $vars['section'];
  }

  drupal_add_css(drupal_get_path('module', 'datawiki_group_map') . '/includes/js/leaflet/leaflet.css', array('type' => 'file', 'group' => CSS_DEFAULT));
  drupal_add_css($settings['html_root'] . '/includes/css/map.css', array('type' => 'file', 'group' => CSS_THEME));
  /*
    @TODO Add this in.  
    <!--[if lte IE 8]><link rel="stylesheet" href="/<?php print $html_root; ?>/includes/style/leaflet/leaflet.ie.css" /><![endif]-->
  */
  
  // Add javascript.
/*   drupal_add_js($settings['html_root'] . '/includes/js/jquery-1.5.min.js', array('type' => 'file', 'group' => JS_DEFAULT)); */
  drupal_add_js($settings['html_root'] . '/includes/js/leaflet/leaflet.js', array('type' => 'file', 'group' => JS_DEFAULT));
  drupal_add_js($settings['html_root'] . '/includes/js/map.js', array('type' => 'file', 'group' => JS_DEFAULT));

  // Add Google API (uses openlayers API key)
  // @TODO require openlayers.
  drupal_add_js(
      'http://maps.google.com/maps/api/js?sensor=false&key=' . 
      variable_get('openlayers_layers_google_api', 
        variable_get('googlemap_api_key', '')
      ), 'external');

  // Pass javascript settings into container variable.
  $datawiki_js_settings = array();
  $datawiki_js_settings['datawiki'] = $settings['javascript_settings'];
  drupal_add_js($datawiki_js_settings, 'setting');
}


function datawiki_group_map_render() {
  $output = '<div>
    <div id="map" style="width: 600px; height: 400px"><div class="loading">Loading Map</div></div>
    <div id="data"></div>
  </div>';

  return $output;
}

/**
 * Generate settings that will be used in javascript.
 * Can be overriden in submodules.
 */
function datawiki_group_map_settings() {
  $settings = array();
  $settings['html_root'] = drupal_get_path('module', 'datawiki_group_map');
  $settings['html_root_custom'] = drupal_get_path('module', 'datawiki_group_map');
  // Get current theme
  // Set these settings in the theme or the submodule (ex. sea_blockwatch.)
  // Set the theme.
  $settings['theme'] = "datawiki";
  $settings['term'] = "all";         
  $settings['javascript_settings'] = array();
  $settings['javascript_settings']['mapColors'] = array();
  $settings['javascript_settings']['mapColors']['color'] = "#2796F2";
  $settings['javascript_settings']['mapColors']['fillColor'] = "#FFFFFF";
  $settings['javascript_settings']['mapColors']['fillOpacity'] = 0.5;
  $settings['javascript_settings']['mapColors']['weight'] = 1;
  $settings['javascript_settings']['mapColors']['opacity'] = 1;
  $settings['javascript_settings']['mapMarkerIconUrl'] =  "/" . $settings['html_root_custom'] . "/includes/images/map-icon.png";
  $settings['javascript_settings']['mapMarkerIconShadowUrl'] =  "/" . $settings['html_root_custom'] . "/includes/images/map-shadow-icon.png";
  $settings['javascript_settings']['mapMarkerIconPointSize'] = array(16,25);
  $settings['javascript_settings']['mapMarkerIconShadowSize'] = array(30,25);
  $settings['javascript_settings']['mapMarkerIconAnchor'] = array(0,0);
  $settings['javascript_settings']['mapMarkerPopupAnchor'] = array(0,0);
  return $settings;
}
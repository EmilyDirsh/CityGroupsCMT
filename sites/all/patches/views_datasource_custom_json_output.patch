Index: views_datasource/views_json.info
===================================================================
--- views_datasource/views_json.info	(revision 21218)
+++ views_datasource/views_json.info	(working copy)
@@ -2,12 +2,12 @@
 name = Views JSON
 description = "Views style plugin to render node content as JSON."
 package = Views
-core = 6.x
+core = 7.x
 dependencies[] = views
-php = 5.1
+; php = 5.1
 ; Information added by drupal.org packaging script on 2010-07-16
-version = "6.x-1.0-beta2"
-core = "6.x"
+version = "7.x-dev"
+core = "7.x"
 project = "views_datasource"
 datestamp = "1279257012"
 
Index: views_datasource/views_xml.views.inc
===================================================================
--- views_datasource/views_xml.views.inc	(revision 21218)
+++ views_datasource/views_xml.views.inc	(working copy)
@@ -9,6 +9,181 @@
  * @ingroup views_plugins
  */
 
+/**
+ * Implementation of views_plugin_style
+ *
+ * Comment: moved from views_plugin_style_xhtml.inc to allow recognition by Drupal, which
+ * expects the class to be declared in the same file as the style declaration at the end
+ * of this file (Hovhannes Tumanyan)
+ */
+class views_plugin_style_xml extends views_plugin_style {
+
+  /** 
+   * Implementation of views_plugin_style::option_definition 
+   */ 
+	function option_definition() {
+		global $user;
+    $options = parent::option_definition();
+    $options['schema'] = array('default' => 'raw', 'translatable' => FALSE);
+    $options['root_element'] = array('default' => 'node', 'translatable' => FALSE);
+    $options['top_child_object'] = array('default' => 'node', 'translatable' => FALSE);
+    $options['field_output'] = array('default' => 'normal', 'translatable' => FALSE);
+    $options['plaintext_output'] = array('default' => TRUE, 'translatable' => FALSE);
+    /*$options['skip_empty_fields'] = array('default' => TRUE, 'translatable' => FALSE);*/
+    $options['element_output'] = array('default' => 'nested', 'translatable' => FALSE);
+    $options['escape_as_CDATA'] = array('default' => 'no', 'translatable' => FALSE);
+    $options['content_type'] = array('default' => 'text/xml', 'translatable' => FALSE);
+    $options['header'] = array('default' => NULL, 'translatable' => FALSE);
+    $options['author'] = array('default' => $user->name, 'translatable' => FALSE);
+    $options['using_views_api_mode'] = array('default' => FALSE, 'translatable' => FALSE);
+    //$options['action_on_missing_field'] = array('default' => 'none', 'translatable' => FALSE);
+    return $options;
+  }
+  
+  /**
+   * Provide a form for setting options.
+   *
+   * @param $form
+   * @param $form_state
+   */
+  function options_form(&$form, &$form_state) {
+  	$form['schema'] = array(
+      '#type' => 'radios',
+      '#title' => ('XML schema'),
+      '#description' => ('The schema or format of the XML data document.'),    
+      '#options' => array('raw' => ('Raw XML'), 'opml' => ('OPML'), 'atom' => ('Atom')),
+      '#default_value' => $this->options['schema'],
+    );
+    $form['root_element'] = array(
+      '#type' => 'textfield',
+      '#title' => ('Root element name'),
+      '#default_value' => $this->options['root_element'],
+      '#description' => ('The name of the root element in a raw XML document.'),
+      //'#process' => array('views_process_dependency'),
+      //'#dependency' => array('edit-style-options-schema' => array('raw')),  
+    );
+  	$form['top_child_object'] = array(
+    '#type' => 'textfield',
+    '#title' => ('Top-level child element name'),
+    '#default_value' => $this->options['top_child_object'],
+    '#description' => ('The name of each top-level child object in a raw XML document. e.g node or user or forum_post'),
+    );       
+   $form['field_output']  = array(
+      '#type' => 'radios',
+      '#title' => 'Field output',
+      '#description' => 'For each row in the view, fields can be output as either the field rendered by Views, or by the raw content of the field.',  
+      '#options' => array('normal' => ('Normal'), 'raw' => ('Raw')),
+      '#default_value' => $this->options['field_output'],
+    );
+    $form['plaintext_output'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Plaintext output'),
+      '#default_value'  => $this->options['plaintext_output'],
+      '#description'    => ('For each row in the view, strip all markup from the field output.'),
+    );
+    /*
+    $form['skip_empty_fields'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Skip adding fields that are empty.'),
+      '#default_value'  => $this->options['skip_empty_fields'],
+      '#description'    => ('For each row in the view, skip adding a field if the field value is NULL or blank.'),
+    );*/    
+    $form['element_output']  = array(
+      '#type' => 'radios',
+      '#title' => 'Element output',
+      '#description' => 'For each row in the view, fields can be output as either nested XML child elements, or attributes of the raw XML element.',
+      '#options' => array('nested' => ('Nested'), 'attributes' => ('Attributes')),
+      '#default_value' => $this->options['element_output'],
+    );
+    $form['escape_as_CDATA']  = array(
+      '#type' => 'radios',
+      '#title' => 'Escape row content as CDATA',
+      '#description' => 'For each row in the view, escape the row field content as XML CDATA sections.',
+      '#options' => array('yes' => ('Yes'), 'no' => ('No')),
+      '#default_value' => $this->options['escape_as_CDATA'],
+      //'#process' => array('views_process_dependency'),
+      //'#dependency' => array('edit-style-options-element-output-options' => array('nested')),
+    );
+    $form['header'] = array (
+      '#type' => 'textarea',
+      '#title' => 'XML document header',
+      '#description' => 'You can use this to place any additional lines you want after the document declaration (like !DOCTYPE.)',
+      '#default_value' => $this->options['header'], 
+      );
+    $form['content_type'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('Content-Type'),
+      '#options'        => array(
+         'default'      => ("Default: text/xml for raw documents, text/html for OPML, application/atom+xml for Atom."),  
+         'text/xml'     => 'text/xml',
+         'text/html'    => 'text/html',
+         'text/x-opml'  => 'text/x-opml'
+         ),
+      '#default_value'  => $this->options['content_type'],
+      '#description'    => ('The Content-Type header that will be sent with the XML output.')
+    );
+    $form['author'] = array (
+      '#type' => 'textfield',
+      '#title' => 'View author',
+      '#description' => 'The Drupal user name of the person who authored this view.',
+      '#default_value' => $this->options['author'], 
+      );     
+    $form['using_views_api_mode'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Views API mode'),
+      '#default_value'  => $this->options['using_views_api_mode'],
+      '#description'    => ('Not using View API mode means the XML gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
+    );
+    /*
+    $form['action_on_missing_field'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('Action on missing field'),
+      '#options' => array('none' => ('Take no action if a required field is missing.'), 'warn' => ('Warn about the missing fields in preview mode.'), 'stop'=>t('Stop page processing and send an error message if a required field is missing.')),
+      '#default_value'  => $this->options['action_on_missing_field'],
+      '#description'    => ('Action to take if no field can be mapped to a required element or schema for the selected XML schema.'),
+    );*/      
+    
+  } 
+ 	
+  /**
+   * Implementation of views_style_plugin::theme_functions(). Returns an array of theme functions to use.
+   * for the current style plugin
+   * @return array 
+   */
+  function theme_functions() {
+    $options = $this->options;
+    if ($options['schema'] == 'raw') $hook = 'views_views_xml_style_raw';
+	  if ($options['schema'] == 'opml') $hook = 'views_views_xml_style_opml';
+	  if ($options['schema'] == 'atom') $hook = 'views_views_xml_style_atom'; 
+  	return views_theme_functions($hook, $this->view, $this->display);
+  }
+
+/**
+ * Implementation of views_style_plugin::additional_theme_functions(). Returns empty array.
+ * @return array
+ */  
+  function additional_theme_functions() {
+  	return array();
+  }
+  
+  /**
+   * Implementation of view_style_plugin::render()
+   */
+  function render() {
+  	$view = $this->view;
+  	$options = $this->options;
+  	$field = $view->field;
+  	
+ 	  $rows = array();
+    
+ 	  foreach ($view->result as $row) {    	      
+    	$rows[] = _views_xml_render_fields($view, $row);        
+    }
+    
+    return theme($this->theme_functions(), array('view' => $this->view, 'options' => $this->options, 'rows' => $rows));
+ 	}
+ 
+}
 
 /**
  * Implementation of hook_views_plugin().
Index: views_datasource/views_rdf.info
===================================================================
--- views_datasource/views_rdf.info	(revision 21218)
+++ views_datasource/views_rdf.info	(working copy)
@@ -2,12 +2,12 @@
 name = Views RDF
 description = "Views style plugin to render node content as RDF."
 package = Views
-core = 6.x
+core = 7.x
 dependencies[] = views
 php = 5.1
 ; Information added by drupal.org packaging script on 2010-07-16
-version = "6.x-1.0-beta2"
-core = "6.x"
+version = "7.x-dev"
+core = "7.x"
 project = "views_datasource"
 datestamp = "1279257012"
 
Index: views_datasource/views_json.views.inc
===================================================================
--- views_datasource/views_json.views.inc	(revision 21218)
+++ views_datasource/views_json.views.inc	(working copy)
@@ -9,12 +9,145 @@
  * @ingroup views_plugins
  */
 
+/**
+ * Implementation of views_plugin_style
+ *
+ * Comment: moved from views_plugin_style_xhtml.inc to allow recognition by Drupal, which
+ * expects the class to be declared in the same file as the style declaration at the end
+ * of this file (Hovhannes Tumanyan)
+ */
+class views_plugin_style_json extends views_plugin_style {
+  /**
+   * Implementation of views_plugin_style::option_definition
+   */
+  	function option_definition() {
+      $options = parent::option_definition();
+      $options['root_object'] = array('default' => 'nodes', 'translatable' => FALSE);
+      $options['top_child_object'] = array('default' => 'node', 'translatable' => FALSE);
+      $options['field_output'] = array('default' => 'normal', 'translatable' => FALSE);
+      $options['plaintext_output'] = array('default' => TRUE, 'translatable' => FALSE);
+      $options['format'] = array('default' => 'simple', 'translatable' => FALSE);
+      $options['jsonp_prefix'] = array('default'=> NULL, 'translatable' => FALSE);
+      $options['content_type'] = array('default' => 'default', 'translatable' => FALSE);
+      $options['using_views_api_mode'] = array('default' => FALSE, 'translatable' => FALSE);
+      return $options;
+  	}
+
+  /**
+   * Provide a form for setting options.
+   *
+   * @param $form
+   * @param $form_state
+   */
+  function options_form(&$form, &$form_state) {
+  	$form['root_object'] = array(
+    '#type' => 'textfield',
+    '#title' => ('Root object name'),
+    '#default_value' => $this->options['root_object'],
+    '#description' => ('The name of the root object in the JSON document. e.g nodes or users or forum_posts'),
+      //'#process' => array('views_process_dependency'),
+      //'#dependency' => array('radios:schema' => array('raw')),
+    );
+  	$form['top_child_object'] = array(
+    '#type' => 'textfield',
+    '#title' => ('Top-level child object'),
+    '#default_value' => $this->options['top_child_object'],
+    '#description' => ('The name of each top-level child object in the JSON document. e.g node or user or forum_post'),
+    );
+  	$form['field_output']  = array(
+      '#type' => 'radios',
+      '#title' => 'Field output',
+      '#description' => 'For each row in the view, fields can be output as either the field rendered by Views, or by the raw content of the field.',
+      '#options' => array('normal' => ('Normal'), 'raw' => ('Raw')),
+      '#default_value' => $this->options['field_output'],
+    );
+    $form['plaintext_output'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Plaintext output'),
+      '#default_value'  => $this->options['plaintext_output'],
+      '#description'    => ('For each row in the view, strip all markup from the field output.'),
+    );
+    $form['format'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('JSON data format'),
+      '#options'        => views_json_views_formats(),
+      '#default_value'  => $this->options['format'],
+      '#description'    => ('What object format will be used for JSON output.')
+    );
+  	$form['jsonp_prefix'] = array(
+    '#type' => 'textfield',
+    '#title' => ('JSONP prefix'),
+    '#default_value' => $this->options['jsonp_prefix'],
+    '#description' => ('If used the JSON output will be enclosed with parentheses and prefixed by this label, as in the JSONP format.'),
+    );
+
+    $form['content_type'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('Content-Type'),
+      '#options'        => array(
+        'default'       => ("Default: application/json"),
+        'text/json'     => ('text/json'),
+       ),
+      '#default_value'  => $this->options['content_type'],
+      '#description'    => ('The Content-Type header that will be sent with the JSON output.')
+    );
+    $form['using_views_api_mode'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Views API mode'),
+      '#default_value'  => $this->options['using_views_api_mode'],
+      '#description'    => ('Not using View API mode means the JSON gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
+    );
+  }
+
+  /**
+   * Implementation of view_style_plugin::theme_functions(). Returns an array of theme functions to use
+   * for the current style plugin
+   * @return array
+   */
+  function theme_functions() {
+    $options = $this->options;
+    $hook = 'views_views_json_style_' . $options['format'];
+  	return views_theme_functions($hook, $this->view, $this->display);
+  }
+
+/**
+ * Implementation of views_style_plugin::additional_theme_functions(). Returns empty array.
+ * @return array
+ */
+  function additional_theme_functions() {
+  	return array();
+  }
+
+  /**
+   * Implementation of view_style_plugin::render()
+   */
+  function render() {
+
+  	$view = $this->view;
+  	$options = $this->options;
+  	$field = $view->field;
+
+ 	  $rows = array();
+
+    foreach ($view->result as $row) {
+      $rows[] = _views_json_render_fields($view, $row);
+    }
+
+    return theme($this->theme_functions(), array('view' => $this->view, 'options' => $this->options, 'rows' => $rows));
+ 	}
+
+}
 
 /**
  * Implementation of hook_views_plugin().
  */
 function views_json_views_plugins() {
+  $formats = views_json_views_formats ();
+  $additional_themes = array ();
+  foreach ($formats as $format => $description)
+    $additional_themes['views_views_json_style_' . $format] = 'style';
   $path = drupal_get_path('module', 'views_json');
+  // array ('views_views_json_style_simple' => 'style', 'views_views_json_style_exhibit' => 'style', 'views_views_json_style_jqgrid' => 'style')
 	return array(
     'module'  => 'views_json',
       'style'   => array(                 // Declare the views_json style plugin.
@@ -26,7 +159,7 @@
 		      'theme'           => 'views_views_json_style',
 	        'theme file'      => 'views_views_json_style.theme.inc',
 	        'theme path'      => $path.'/theme',
-	        'additional themes' => array ('views_views_json_style_simple' => 'style', 'views_views_json_style_exhibit' => 'style'),
+        'additional themes' => $additional_themes,
           'uses row plugin' => FALSE,
           'uses fields'     => TRUE,
           'uses options'    => TRUE,
@@ -37,3 +170,33 @@
     ),
   );
 }
+
+/*
+ * All recognised JSON output formats
+ */
+function views_json_views_formats () {
+  $formats = module_invoke_all ('views_json_formats');
+  return $formats;
+}
+
+
+/*
+ * hook implementation should simply return an array,
+ * module_invoke_all() will merge them into one array.
+ * To support additional output formats, do the following:
+ * 1. Implement this hook.
+ * 2. Implement template_preprocess_views_views_json_style_XXXX (see
+ *    example in theme/views_views_json_style.theme.inc) in your module, make sure it is loaded!
+ * 3. Create a views-views-json-style-XXXX.tpl.php file in
+ *    views_datasource/theme by copying
+ *    views-views-json-style-simple.tpl.php. Unfortunately this cannot
+ *    be in your module it appears.
+ */
+function views_json_views_json_formats () {
+  $formats = array (
+    'simple'  => t ('Simple'),
+    'exhibit' => t ('MIT Simile/Exhibit'),
+    'jqgrid' => t ('To be consumed by jqGrid'),
+  );
+  return $formats;
+}
Index: views_datasource/views_rdf.views.inc
===================================================================
--- views_datasource/views_rdf.views.inc	(revision 21218)
+++ views_datasource/views_rdf.views.inc	(working copy)
@@ -11,6 +11,138 @@
 
 
 /**
+ * Implementation of views_plugin_style
+ *
+ * Comment: moved from views_plugin_style_xhtml.inc to allow recognition by Drupal, which
+ * expects the class to be declared in the same file as the style declaration at the end
+ * of this file (Hovhannes Tumanyan)
+ */
+class views_plugin_style_rdf extends views_plugin_style {
+	
+  /** 
+   * Implementation of views_plugin_style::option_definition 
+   */ 
+	function option_definition() {
+		global $user;
+    $options = parent::option_definition();
+    $options['vocabulary'] = array('default' => 'foaf', 'translatable' => FALSE);
+    $options['field_output'] = array('default' => 'normal', 'translatable' => FALSE);
+    $options['plaintext_output'] = array('default' => TRUE, 'translatable' => FALSE);
+    $options['escape_as_CDATA'] = array('default' => 'no', 'translatable' => FALSE);
+    $options['content_type'] = array('default' => 'text/xml', 'translatable' => FALSE);
+    $options['header'] = array('default' => NULL, 'translatable' => FALSE);
+    $options['author'] = array('default' => $user->name, 'translatable' => FALSE);
+    $options['using_views_api_mode'] = array('default' => FALSE, 'translatable' => FALSE);
+    //$options['action_on_missing_field'] = array('default' => 'none', 'translatable' => FALSE);
+    return $options;
+  }	
+  
+  /**
+   * Provide a form for setting options.
+   *
+   * @param $form
+   * @param $form_state
+   */
+  function options_form(&$form, &$form_state) {
+  	$form['vocabulary'] = array(
+      '#type' => 'radios',
+      '#title' => ('RDF vocabulary'),
+      '#description' => ('The RDF vocabulary to use when rendering the view.'),    
+      '#options' => array('foaf' => ('FOAF'), 'sioc' => ('SIOC'), 'doap' => ('DOAP')),
+      '#default_value' => $this->options['vocabulary'],
+    );
+   $form['field_output']  = array(
+      '#type' => 'radios',
+      '#title' => 'Field output',
+      '#description' => 'For each row in the view, fields can be output as either the field rendered by Views, or by the raw content of the field.',  
+      '#options' => array('normal' => ('Normal'), 'raw' => ('Raw')),
+      '#default_value' => $this->options['field_output'],
+    );
+    $form['plaintext_output'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Plaintext output'),
+      '#default_value'  => $this->options['plaintext_output'],
+      '#description'    => ('For each row in the view, strip all markup from the field output.'),
+    );
+    $form['escape_as_CDATA']  = array(
+      '#type' => 'radios',
+      '#title' => 'Escape row content as CDATA',
+      '#description' => 'For each row in the view, escape the row field content as XML CDATA sections.',
+      '#options' => array('yes' => ('Yes'), 'no' => ('No')),
+      '#default_value' => $this->options['escape_as_CDATA'],
+    );
+    $form['header'] = array (
+      '#type' => 'textarea',
+      '#title' => 'XML document header',
+      '#description' => 'You can use this to place any additional lines you want after the document declaration (like !DOCTYPE.)',
+      '#default_value' => $this->options['header'], 
+      );
+    $form['content_type'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('Content-Type'),
+      '#options'        => array(
+         'default'      => ("Default: application/rdf+xml for FOAF and SIOC documents."),  
+         'text/xml'     => 'text/xml',
+       ),
+      '#default_value'  => $this->options['content_type'],
+      '#description'    => ('The Content-Type header that will be sent with the XML output.')
+    );
+    $form['author'] = array (
+      '#type' => 'textfield',
+      '#title' => 'View author',
+      '#description' => 'The Drupal user name of the person who authored this view.',
+      '#default_value' => $this->options['author'], 
+      );     
+    $form['using_views_api_mode'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Views API mode'),
+      '#default_value'  => $this->options['using_views_api_mode'],
+      '#description'    => ('Not using View API mode means the RDF gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
+    );
+  }
+
+  /**
+   * Implementation of views_style_plugin::theme_functions(). Returns an array of theme functions to use.
+   * for the current style plugin
+   * @return array 
+   */
+  function theme_functions() {
+    $options = $this->options;
+    if ($options['vocabulary'] == 'foaf') $hook = 'views_views_rdf_style_foaf';
+	  if ($options['vocabulary'] == 'sioc') $hook = 'views_views_rdf_style_sioc';
+	  if ($options['vocabulary'] == 'doap') $hook = 'views_views_rdf_style_doap';
+	   
+  	return views_theme_functions($hook, $this->view, $this->display);
+  }
+
+/**
+ * Implementation of views_style_plugin::additional_theme_functions(). Returns empty array.
+ * @return array
+ */  
+  function additional_theme_functions() {
+  	return array();
+  }
+  
+  /**
+   * Implementation of view_style_plugin::render()
+   */
+  function render() {
+  	$view = $this->view;
+  	$options = $this->options;
+  	$field = $view->field;
+
+ 	  $rows = array();
+ 	 
+    foreach ($view->result as $row) {
+      $rows[] = _views_rdf_render_fields($view, $row);
+    }
+  
+ 	  return theme($this->theme_functions(), array('view' => $this->view, 'options' => $this->options, 'rows' => $rows));
+ 	}
+
+}
+
+/**
  * Implementation of hook_views_plugin().
  */
 function views_rdf_views_plugins() {
Index: views_datasource/views_xhtml.module
===================================================================
--- views_datasource/views_xhtml.module	(revision 21218)
+++ views_datasource/views_xhtml.module	(working copy)
@@ -152,7 +152,7 @@
       $object->id = $id;
       $object->content = $field_output;
       $object->raw = $field_raw;
-      $object->class = views_css_safe($id);
+      $object->class = drupal_clean_css_identifier(strtolower($id));
       $object->label = check_plain($view->field[$id]->label());
       $object->is_multiple = $field_is_multiple;       
       $rendered_fields[$id] = $object;      
Index: views_datasource/views_xml.module
===================================================================
--- views_datasource/views_xml.module	(revision 21218)
+++ views_datasource/views_xml.module	(working copy)
@@ -152,7 +152,7 @@
       $object->id = $id;
       $object->content = $field_output;
       $object->raw = $field_raw;
-      $object->class = views_css_safe($id);
+      $object->class = drupal_clean_css_identifier(strtolower($id));
       $object->label = check_plain($view->field[$id]->label());
       $object->is_multiple = $field_is_multiple;       
       $rendered_fields[$id] = $object;      
Index: views_datasource/theme/views_views_xhtml_style.theme.inc
===================================================================
--- views_datasource/theme/views_views_xhtml_style.theme.inc	(revision 21218)
+++ views_datasource/theme/views_views_xhtml_style.theme.inc	(working copy)
@@ -14,7 +14,7 @@
  * @see views_xhtml.views.inc
  */
 
-function template_preprocess_views_views_xhtml_style_hcard($vars) {
+function template_preprocess_views_views_xhtml_style_hcard(&$vars) {
 	global $user;
 	global $base_url; 
   $view = $vars["view"];
@@ -176,7 +176,7 @@
   $vars["hcards"] = $hcards;  
 }
 
-function template_preprocess_views_views_xhtml_style_hcalendar($vars) {
+function template_preprocess_views_views_xhtml_style_hcalendar(&$vars) {
 	global $user;
 	global $base_url; 
   $view = $vars["view"];
Index: views_datasource/theme/views_views_xml_style.theme.inc
===================================================================
--- views_datasource/theme/views_views_xml_style.theme.inc	(revision 21218)
+++ views_datasource/theme/views_views_xml_style.theme.inc	(working copy)
@@ -14,7 +14,7 @@
  * @see views_xml.views.inc
  */
 
-function template_preprocess_views_views_xml_style_raw($vars) {
+function template_preprocess_views_views_xml_style_raw(&$vars) {
 	$view = $vars["view"];
   $rows = $vars["rows"];
   $options = $vars["options"];  
@@ -88,7 +88,7 @@
 	$vars["xml"] = $xml;
 }
 
-function template_preprocess_views_views_xml_style_opml($vars) {
+function template_preprocess_views_views_xml_style_opml(&$vars) {
 	global $user;
 	global $base_url; 
 	$view = $vars["view"];
@@ -101,7 +101,7 @@
   $vars["content_type"] = ($options['content_type'] == 'default') ? 'text/html' : $options['content_type'];
   $header  = $options["header"];
   $author = _views_xml_format_author($options["author"]);
-  if (!$header) {
+  if (empty($header) || !$header) {
   	$vars["title"] = ($view->get_title() ? $view->get_title(): $view->name);
   	$vars["dateCreated"] = format_date(time(), 'custom', DATE_RFC822);
   	$vars["ownerName"] = $author["name"];
@@ -221,7 +221,7 @@
  * @param $vars
  * @return unknown_type
  */
-function template_preprocess_views_views_xml_style_atom($vars) {
+function template_preprocess_views_views_xml_style_atom(&$vars) {
 	global $user;
 	global $base_url; 
   $view = $vars["view"];
Index: views_datasource/theme/views-views-xhtml-style-hcalendar.tpl.php
===================================================================
--- views_datasource/theme/views-views-xhtml-style-hcalendar.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-xhtml-style-hcalendar.tpl.php	(working copy)
@@ -88,7 +88,7 @@
     print $xhtml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xhtml;
     exit;
   }  
Index: views_datasource/theme/views-views-xhtml-style-hcard.tpl.php
===================================================================
--- views_datasource/theme/views-views-xhtml-style-hcard.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-xhtml-style-hcard.tpl.php	(working copy)
@@ -122,7 +122,7 @@
     print $xhtml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xhtml;
     exit;
   }  
Index: views_datasource/theme/views_views_json_style.theme.inc
===================================================================
--- views_datasource/theme/views_views_json_style.theme.inc	(revision 21218)
+++ views_datasource/theme/views_views_json_style.theme.inc	(working copy)
@@ -14,7 +14,7 @@
  * @see views_json.views.inc
  */ 
 
-function template_preprocess_views_views_json_style_simple($vars) {	
+function template_preprocess_views_views_json_style_simple(&$vars) {
   $view = $vars["view"];
   $rows = $vars["rows"];
   $options = $vars["options"];
@@ -57,7 +57,7 @@
   $vars["rows"] = array($root_object => $objects);
 }
 
-function template_preprocess_views_views_json_style_exhibit($vars) {	
+function template_preprocess_views_views_json_style_exhibit(&$vars) {
   $view = $vars["view"];
   $rows = $vars["rows"];
   $options = $vars["options"];
@@ -101,3 +101,57 @@
   $vars["rows"] = array($root_object => $objects); 
 }
 
+function template_preprocess_views_views_json_style_jqgrid(&$vars) {
+  $view = $vars["view"];
+  $rows = $vars["rows"];
+  $options = $vars["options"];
+  $base = $view->base_table;
+  $root_object = $options["root_object"];
+  $top_child_object = $options["top_child_object"];
+  $plaintext_output = $options["plaintext_output"];
+  $objects = array();
+
+  foreach($rows as $row) {
+  	$object = array();
+  	foreach ($row as $field) {
+  	  if ($options["field_output"] == "normal") {
+  	  	if ($field->label)
+  	  	  $label = $plaintext_output ? strip_tags($field->label) : $field->label;
+  	  	else
+		  $label = $plaintext_output ? strip_tags($field->id) : $field->id;
+
+        if (!$field->is_multiple) {
+  	  	  $content = $plaintext_output ? strip_tags($field->content) : $field->content;
+        }
+        else {
+        	$content = array();
+        	foreach($field->content as $n=>$oc) $content[$n] = ($plaintext_output ? strip_tags($oc) : $oc);
+        }
+  	  }
+  	  elseif ($options["field_output"] == "raw") {
+  	  	$label = $plaintext_output ? strip_tags($field->id) : $field->id;
+  	    if (!$field->is_multiple) {
+  	  	  $content = $plaintext_output ? strip_tags($field->raw) : $field->raw;
+        }
+        else {
+        	$content = array();
+        	foreach($field->raw as $n=>$oc) $content[$n] = $plaintext_output ? strip_tags($oc) : $oc;
+        }
+  	  }
+  	  $object[$label] = $content;
+  	}
+  	$objects[] = $object;
+  }
+
+  if (isset($view->query->pager)){
+	global $pager_total, $pager_total_items;
+
+	$pagerId = $view->query->pager->options['id'];
+	$very_top['page'] = $view->query->pager->current_page + 1;
+	$very_top['records'] = $pager_total_items[$pagerId];//100;//$view->query->pager->total_items;
+	$very_top['total'] = $pager_total[$pagerId];//$view->query->pager->options['total_pages'] != '' ? $view->query->pager->options['total_pages'] : 1;
+	$very_top['rows'] = $objects;
+  }
+
+  $vars["rows"] = $very_top;//array($root_object => $objects);
+}
\ No newline at end of file
Index: views_datasource/theme/views-views-rdf-style-foaf.tpl.php
===================================================================
--- views_datasource/theme/views-views-rdf-style-foaf.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-rdf-style-foaf.tpl.php	(working copy)
@@ -14,8 +14,9 @@
 
 //_views_rdf_debug_stop($persons);
 global $base_url;
+$xml = "";
 $content_type = ($options['content_type'] == 'default') ? 'application/rdf+xml' : $options['content_type'];
-if (!$header) { //build our own header
+if (empty($header) || !$header) { //build our own header
   $xml .= '<?xml version="1.0" encoding="UTF-8" ?>'."\n";
   $xml .= '<!-- generator="Drupal Views_Datasource.Module" -->'."\n";
   $xml .= '<rdf:RDF xmlns="http://xmlns.com/foaf/0.1"'."\n";
@@ -58,7 +59,7 @@
     print $xml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+  	drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xml;
     exit;
   } 
Index: views_datasource/theme/views_views_rdf_style.theme.inc
===================================================================
--- views_datasource/theme/views_views_rdf_style.theme.inc	(revision 21218)
+++ views_datasource/theme/views_views_rdf_style.theme.inc	(working copy)
@@ -19,7 +19,7 @@
  * @param $vars
  * @return unknown_type
  */
-function template_preprocess_views_views_rdf_style_foaf($vars) {
+function template_preprocess_views_views_rdf_style_foaf(&$vars) {
 	global $user;
 	global $base_url; 
   $view = $vars["view"];
@@ -35,7 +35,7 @@
   $plaintext_output = $options["plaintext_output"];
   $vars["content_type"] = ($options['content_type'] == 'default') ? 'application/atom+rdf' : $options['content_type'];
   $header  = $options["header"];
-  if (!$vars["header"]) {
+  if (empty($vars["header"]) || !$vars["header"]) {
   	$vars["title"] = check_plain(($view->get_title() ? $view->get_title(): $view->name));
   	$vars["id"] = check_url($view->get_url());
   	$vars["updated"] = format_date(time(), 'custom', DATE_ATOM);
@@ -88,6 +88,7 @@
       }
       if (stripos($label, 'nick') !== FALSE) {
         $person["nick"] = check_plain($content);
+//echo "Nick is ".$person["nick"];
         continue;
       }
       if ((stripos($label, 'mbox') !== FALSE) && !(stripos($label, 'mbox_sha1sum') !== FALSE)) {
@@ -155,6 +156,7 @@
         continue;
       }
     }  	
+//echo "Added person"; var_dump($person);
 	  $persons[] = $person; 
   }//for
   $vars["persons"] = $persons;  
@@ -165,7 +167,7 @@
  * @param $vars
  * @return unknown_type
  */
-function template_preprocess_views_views_rdf_style_sioc($vars) {
+function template_preprocess_views_views_rdf_style_sioc(&$vars) {
 	global $base_url; 
   $view = $vars["view"];
   $rows = $vars["rows"];
@@ -502,7 +504,7 @@
  * @param $vars
  * @return none
  */
-function template_preprocess_views_views_rdf_style_doap($vars) {
+function template_preprocess_views_views_rdf_style_doap(&$vars) {
   global $user;
   global $base_url; 
   $view = $vars["view"];
Index: views_datasource/theme/views-views-xml-style-raw.tpl.php
===================================================================
--- views_datasource/theme/views-views-xml-style-raw.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-xml-style-raw.tpl.php	(working copy)
@@ -11,14 +11,14 @@
  * @ingroup views_templates
  * @see views_views_xml_style.theme.inc
  */	
-	if ($view->override_path) {       // inside live preview
+  if (isset($view->override_path)) {       // inside live preview
     print htmlspecialchars($xml);
   }
   else if ($options['using_views_api_mode']) {     // We're in Views API mode.
     print $xml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xml;
     exit;
   }
\ No newline at end of file
Index: views_datasource/theme/views-views-rdf-style-doap.tpl.php
===================================================================
--- views_datasource/theme/views-views-rdf-style-doap.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-rdf-style-doap.tpl.php	(working copy)
@@ -61,7 +61,7 @@
   print $xml;
 }
 else {
-  drupal_set_header("Content-Type: $content_type; charset=utf-8");
+  drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
   print $xml;
   exit;
 }
Index: views_datasource/theme/views-views-xml-style-atom.tpl.php
===================================================================
--- views_datasource/theme/views-views-xml-style-atom.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-xml-style-atom.tpl.php	(working copy)
@@ -13,11 +13,12 @@
  */
 
 global $base_url;
+$xml = "";
 $content_type = ($options['content_type'] == 'default') ? 'application/atom+xml' : $options['content_type'];
 $xml .= "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n";
 $xml .= "<!-- generator=\"Drupal Views Datasource.Module\" -->\n";
 $xml .= "<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en\">\n";
-if (!$header) { //build our own header
+if (empty($header) || !$header) { //build our own header
 	$xml .= "  <title>$title</title>\n";
 	$xml .= "  <link rel=\"alternate\" type=\"text/html\" href=\"$base_url\" />\n";
 	$xml .= "  <link rel =\"self\" type=\"application/atom+xml\" href=\"$link\" />\n";
@@ -51,9 +52,9 @@
     if (array_key_exists("teaser", $entry)) $teaser = $entry["teaser"];
     if (array_key_exists("content", $entry)) $content = $entry["content"];
     $xml .= "  <entry>\n    <id>$id</id>\n    <title>".(($options['escape_as_CDATA'] == 'yes') ? "<![CDATA[$title]]>": "$title")."</title>\n    <updated>$updated</updated>\n";  //put required elements first
-    if ($link) $xml .= "    <link href=\"$link\"/>\n";
-    if ($teaser) $xml .= "    <teaser>".(($options['escape_as_CDATA'] == 'yes') ? "<![CDATA[$teaser]]>": "$teaser")."</teaser>\n";
-    if ($content) $xml .= "    <content>".(($options['escape_as_CDATA'] == 'yes') ? "<![CDATA[$content]]>": "$content")."</content>\n";
+    if (isset($link)) $xml .= "    <link href=\"$link\"/>\n";
+    if (isset($teaser)) $xml .= "    <teaser>".(($options['escape_as_CDATA'] == 'yes') ? "<![CDATA[$teaser]]>": "$teaser")."</teaser>\n";
+    if (isset($content)) $xml .= "    <content>".(($options['escape_as_CDATA'] == 'yes') ? "<![CDATA[$content]]>": "$content")."</content>\n";
     if (array_key_exists("author", $entry)) {
     	$author_name = $entry["author"]["name"]; if (array_key_exists("email", $entry["author"])) $author_email = $entry["author"]["email"];
     	$xml .= "    <author>\n      <name>$author_name</name>\n";      
@@ -80,7 +81,7 @@
     print $xml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xml;
     exit;
   }
\ No newline at end of file
Index: views_datasource/theme/views-views-json-style-simple.tpl.php
===================================================================
--- views_datasource/theme/views-views-json-style-simple.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-json-style-simple.tpl.php	(working copy)
@@ -21,6 +21,7 @@
 	print "<code>$json</code>";
 }
 else {
+	//				var_dump($rows);
   $json = json_encode($rows);
   if ($jsonp_prefix) $json = "$jsonp_prefix($json)";
   if ($options['using_views_api_mode']) {
@@ -31,7 +32,7 @@
     // We want to send the JSON as a server response so switch the content
     // type and stop further processing of the page.
     $content_type = ($options['content_type'] == 'default') ? 'application/json' : $options['content_type'];
-    drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $json;
     //Don't think this is needed in .tpl.php files: module_invoke_all('exit');
     exit;
Index: views_datasource/theme/views-views-xml-style-opml.tpl.php
===================================================================
--- views_datasource/theme/views-views-xml-style-opml.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-xml-style-opml.tpl.php	(working copy)
@@ -1,4 +1,5 @@
 <?php
+$xml="";
 // $Id: views-views-xml-style-opml.tpl.php,v 1.1.2.4 2010/06/07 03:27:07 allisterbeharry Exp $
 /**
  * @file views-views-xml-style-opml.tpl.php
@@ -15,7 +16,7 @@
   $xml =  "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
   $xml .= '<!-- generator="Drupal Views Datasource.Module" -->'."\n";
   $xml .= "<opml version =\"2.0\">\n"; 
-  if (!$header) { //build our own header
+if (empty($header) || !$header) { //build our own header
     $xml .= "  <head>\n";
   	$xml .= "    <title>$title</title>\n";
     $xml .= "    <ownerName>$ownerName</ownerName>\n";
@@ -59,7 +60,7 @@
   }
   else {
     $content_type = $options["content_type"];
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xml;
     exit;
   }
Index: views_datasource/theme/views-views-rdf-style-sioc.tpl.php
===================================================================
--- views_datasource/theme/views-views-rdf-style-sioc.tpl.php	(revision 21218)
+++ views_datasource/theme/views-views-rdf-style-sioc.tpl.php	(working copy)
@@ -114,7 +114,7 @@
     print $xml;
   }
   else {
-  	drupal_set_header("Content-Type: $content_type; charset=utf-8");
+    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
     print $xml;
     exit;
   }   
Index: views_datasource/views_xhtml.info
===================================================================
--- views_datasource/views_xhtml.info	(revision 21218)
+++ views_datasource/views_xhtml.info	(working copy)
@@ -2,12 +2,12 @@
 name = Views XHTML
 description = "Views style plugin to render node content as XHTML microformats."
 package = Views
-core = 6.x
+core = 7.x
 dependencies[] = views
 php = 5.1
 ; Information added by drupal.org packaging script on 2010-07-16
-version = "6.x-1.0-beta2"
-core = "6.x"
+version = "7.x-dev"
+core = "7.x"
 project = "views_datasource"
 datestamp = "1279257012"
 
Index: views_datasource/views_xml.info
===================================================================
--- views_datasource/views_xml.info	(revision 21218)
+++ views_datasource/views_xml.info	(working copy)
@@ -2,12 +2,12 @@
 name = Views XML
 description = "Views style plugin to render node content as XML"
 package = Views
-core = 6.x
+core = 7.x
 dependencies[] = views
 php = 5.1
 ; Information added by drupal.org packaging script on 2010-07-16
-version = "6.x-1.0-beta2"
-core = "6.x"
+version = "7.x-dev"
+core = "7.x"
 project = "views_datasource"
 datestamp = "1279257012"
 
Index: views_datasource/views_json.module
===================================================================
--- views_datasource/views_json.module	(revision 21218)
+++ views_datasource/views_json.module	(working copy)
@@ -8,6 +8,10 @@
  * @see views_json.views.inc
  */
 
+function views_json_init(){
+	if (isset($_GET['sort_order']))
+		$_GET['sort_order'] = strtoupper($_GET['sort_order']);
+}
 
 function views_json_views_api() {
   return array(
@@ -109,6 +113,7 @@
  *   Object containing all the raw and rendered fields  
  */
 function _views_json_render_fields($view, $row) {  
+//echo " render fields" ;
   $field_ids = array_keys($view->field);
   $rendered_fields = array();
   foreach ($field_ids as $id) {  
@@ -127,6 +132,8 @@
     	else $field_raw = $view->field[$field->options['id']]->advanced_render($row);     	 
     }    
     else {
+//		var_dump($row);
+//	echo "Field: ".$field_output;
       $field_output = $view->field[$field->options['id']]->advanced_render($row);
       $field_raw = (isset($view->field[$id]->field_alias) && isset($row->{$view->field[$id]->field_alias})) ? $row->{$view->field[$id]->field_alias} : NULL;
     }
@@ -153,7 +160,7 @@
       $object->id = $id;
       $object->content = $field_output;
       $object->raw = $field_raw;
-      $object->class = views_css_safe($id);
+      $object->class = drupal_clean_css_identifier(strtolower($id));//views_css_safe($id);
       $object->label = check_plain($view->field[$id]->label());
       $object->is_multiple = $field_is_multiple;       
       $rendered_fields[$id] = $object;      
Index: views_datasource/README.txt
===================================================================
--- views_datasource/README.txt	(revision 21218)
+++ views_datasource/README.txt	(working copy)
@@ -5,16 +5,12 @@
 
 Current Version
 ---------------
-6.x-1.0-BETA2
+7.x-dev
 
 Release Notes
 -------------
-Fixed:
-http://drupal.org/node/838264 Patch by levjj to add DOAP support to views_rdf
-http://drupal.org/node/844442 Views theme overriding now works as it should
-http://drupal.org/node/855166 author element is now included in Atom doc header
-http://drupal.org/node/847716: Closing tag of an XML element does not include
-xmlns or any additional attributes defined on the starting tag.
+Ported to Drupal 7 and added a JSON style that can be used to feed data
+into JqGrid (Hovhannes Tumanyan - hovhannes_tumanyan@yahoo.com)
  
 Upgrade Notes
 -------------
Index: views_datasource/views_rdf.module
===================================================================
--- views_datasource/views_rdf.module	(revision 21218)
+++ views_datasource/views_rdf.module	(working copy)
@@ -153,7 +153,7 @@
       $object->id = $id;
       $object->content = $field_output;
       $object->raw = $field_raw;
-      $object->class = views_css_safe($id);
+      $object->class = drupal_clean_css_identifier(strtolower($id));
       $object->label = check_plain($view->field[$id]->label());
       $object->is_multiple = $field_is_multiple;       
       $rendered_fields[$id] = $object;      
Index: views_datasource/views_xhtml.views.inc
===================================================================
--- views_datasource/views_xhtml.views.inc	(revision 21218)
+++ views_datasource/views_xhtml.views.inc	(working copy)
@@ -9,6 +9,142 @@
  * @ingroup views_plugins
  */
 
+/**
+ * Implementation of views_plugin_style
+ *
+ * Comment: moved from views_plugin_style_xhtml.inc to allow recognition by Drupal, which
+ * expects the class to be declared in the same file as the style declaration at the end
+ * of this file (Hovhannes Tumanyan)
+ */
+class views_plugin_style_xhtml extends views_plugin_style {
+  /**
+   * Set default options
+   */
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['format'] = array('default' => 'hcard', 'translatable' => FALSE);
+    $options['field_output'] = array('default' => 'normal', 'translatable' => FALSE);
+    $options['plaintext_output'] = array('default' => TRUE, 'translatable' => FALSE);
+    /*$options['skip_empty_fields'] = array('default' => TRUE, 'translatable' => FALSE);*/
+    $options['escape_as_CDATA'] = array('default' => 'no', 'translatable' => FALSE);
+    $options['content_type'] = array('default' => 'text/xhtml', 'translatable' => FALSE);
+    $options['header'] = array('default' => NULL, 'translatable' => FALSE);
+    $options['author'] = array('default' => $user->name, 'translatable' => FALSE);
+    $options['using_views_api_mode'] = array('default' => FALSE, 'translatable' => FALSE);
+    //$options['action_on_missing_field'] = array('default' => 'none', 'translatable' => FALSE);
+    return $options;
+  }
+
+  /**
+   * Provide a form for setting options.
+   *
+   * @param $form
+   * @param $form_state
+   */
+  function options_form(&$form, &$form_state) {
+    $form['format'] = array(
+      '#type' => 'radios',
+      '#title' => ('Microformat'),
+      '#options' => array('hcard' => ('hCard'), 'hcalendar' => ('hCalendar')),
+      '#default_value' => $this->options['format'],
+    );
+   $form['field_output']  = array(
+      '#type' => 'radios',
+      '#title' => 'Field output',
+      '#description' => 'For each row in the view, fields can be output as either the field rendered by Views, or by the raw content of the field.',  
+      '#options' => array('normal' => ('Normal'), 'raw' => ('Raw')),
+      '#default_value' => $this->options['field_output'],
+    );
+    $form['plaintext_output'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Plaintext output'),
+      '#default_value'  => $this->options['plaintext_output'],
+      '#description'    => ('For each row in the view, strip all markup from the field output.'),
+    );
+    /*
+    $form['skip_empty_fields'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Skip adding fields that are empty.'),
+      '#default_value'  => $this->options['skip_empty_fields'],
+      '#description'    => ('For each row in the view, skip adding a field if the field value is NULL or blank.'),
+    );*/    
+    $form['escape_as_CDATA']  = array(
+      '#type' => 'radios',
+      '#title' => 'Escape row content as CDATA',
+      '#description' => 'For each row in the view, escape the row field content as XML CDATA sections.',
+      '#options' => array('yes' => ('Yes'), 'no' => ('No')),
+      '#default_value' => $this->options['escape_as_CDATA'],
+      //'#process' => array('views_process_dependency'),
+      //'#dependency' => array('edit-style-options-element-output-options' => array('nested')),
+    );
+    $form['header'] = array (
+      '#type' => 'textarea',
+      '#title' => 'XML document header',
+      '#description' => 'You can use this to place any additional lines you want after the document declaration (like !DOCTYPE.)',
+      '#default_value' => $this->options['header'], 
+      );
+    $form['content_type'] = array(
+      '#type'           => 'radios',
+      '#title'          => ('Content-Type'),
+      '#options'        => array(
+         'default'      => ("Default: text/xhtml"),  
+         'text/xml'     => 'text/xml',
+         'text/html'    => 'text/html',
+       ),
+      '#default_value'  => $this->options['content_type'],
+      '#description'    => ('The Content-Type header that will be sent with the XHTML output.')
+    );
+    $form['author'] = array (
+      '#type' => 'textfield',
+      '#title' => 'View author',
+      '#description' => 'The Drupal user name of the person who authored this view.',
+      '#default_value' => $this->options['author'], 
+      );     
+    $form['using_views_api_mode'] = array(
+      '#type'           => 'checkbox',
+      '#title'          => ('Views API mode'),
+      '#default_value'  => $this->options['using_views_api_mode'],
+      '#description'    => ('Not using View API mode means the JSON gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
+    );    
+  }
+
+  /**
+   * Implementation of views_style_plugin::theme_functions(). Returns an array of theme functions to use.
+   * for the current style plugin
+   * @return array 
+   */
+  function theme_functions() {
+    $options = $this->options;
+    if ($options['format'] == 'hcard') $hook = 'views_views_xhtml_style_hcard';
+	  if ($options['format'] == 'hcalendar') $hook = 'views_views_xhtml_style_hcalendar'; 
+  	return views_theme_functions($hook, $this->view, $this->display);
+  }
+
+/**
+ * Implementation of views_style_plugin::additional_theme_functions(). Returns empty array.
+ * @return array
+ */  
+  function additional_theme_functions() {
+  	return array();
+  }
+    
+  /**
+   * Implementation of view_style_plugin::render()
+   */
+  function render() {
+  	$view = $this->view;
+  	$options = $this->options;
+  	$field = $view->field;
+
+ 	  $rows = array();
+ 	 
+    foreach ($view->result as $row) {
+      $rows[] = _views_xhtml_render_fields($view, $row);
+    }
+
+      return theme($this->theme_functions(), array('view' => $this->view, 'options' => $this->options, 'rows' => $rows)); 	      
+ 	}  
+}
 
 /**
  * Implementation of hook_views_plugin().
@@ -16,7 +152,7 @@
 function views_xhtml_views_plugins() {
 	$path = drupal_get_path('module', 'views_xhtml');
   return array(
-    'module'  => views_xhtml,
+    'module'  => 'views_xhtml',
     'style'   => array(                 // declare the views_xhtml style plugin
       'views_xhtml' => array(
         'title'           => ('XHTML data document'),
